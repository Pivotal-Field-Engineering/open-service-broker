package com.swisscom.cloud.sb.broker.services.mysql

import com.google.common.annotations.VisibleForTesting
import com.google.common.base.Optional
import com.swisscom.cloud.sb.broker.binding.BindRequest
import com.swisscom.cloud.sb.broker.binding.BindResponse
import com.swisscom.cloud.sb.broker.binding.UnbindRequest
import com.swisscom.cloud.sb.broker.model.ProvisionRequest
import com.swisscom.cloud.sb.broker.model.ServiceDetail
import com.swisscom.cloud.sb.broker.provisioning.async.AsyncOperationResult
import com.swisscom.cloud.sb.broker.provisioning.lastoperation.LastOperationJobContext
import com.swisscom.cloud.sb.broker.provisioning.statemachine.ServiceStateWithAction
import com.swisscom.cloud.sb.broker.provisioning.statemachine.StateMachine
import com.swisscom.cloud.sb.broker.services.bosh.BoshBasedServiceProvider
import com.swisscom.cloud.sb.broker.services.bosh.BoshTemplate
import com.swisscom.cloud.sb.broker.services.bosh.statemachine.BoshDeprovisionState
import com.swisscom.cloud.sb.broker.services.bosh.statemachine.BoshProvisionState
import com.swisscom.cloud.sb.broker.services.bosh.statemachine.BoshStateMachineContext
import com.swisscom.cloud.sb.broker.services.bosh.statemachine.BoshStateMachineFactory
import com.swisscom.cloud.sb.broker.services.mongodb.enterprise.MongoDbEnterpriseConfig
import com.swisscom.cloud.sb.broker.util.ServiceDetailsHelper
import com.swisscom.cloud.sb.client.model.DeleteServiceInstanceBindingRequest
import groovy.transform.CompileStatic
import groovy.util.logging.Slf4j
import org.springframework.cloud.servicebroker.model.CreateServiceInstanceBindingRequest
import org.springframework.http.HttpStatus
import org.springframework.stereotype.Component

import javax.annotation.PostConstruct

import static ServiceDetail.from
import static com.swisscom.cloud.sb.broker.util.ServiceDetailKey.PASSWORD
import static com.swisscom.cloud.sb.broker.util.StringGenerator.randomAlphaNumeric

@Component
@CompileStatic
@Slf4j
class MysqlServiceProvider extends BoshBasedServiceProvider<MysqlConfig> {

    public static final String PORT = 'port'
    public static final String EXTERNAL_HOST_KEY = "cf_mysql.broker.external_host"
    public static final String BROKER_PASSWORD_KEY = "cf_mysql.broker.auth_password"

    protected ServiceBrokerClientFacade serviceBrokerClientFacade


    @PostConstruct
    void init() {
        log.info(serviceConfig.toString())
    }

    @Override
    Collection<ServiceDetail> customizeBoshTemplate(BoshTemplate template, ProvisionRequest provisionRequest) {

        /*
            broker:
              auth_password: random //FIXME: would be generated by credhub
              auth_username: cc

           external_host: p-mysql-service_instance_id.nd-cfapi.itn.ftgroup
    random passwords.

         */

        def broker_auth_password= randomAlphaNumeric(32)

        def serviceInstanceGuid = provisionRequest.serviceInstanceGuid
        template.replace(EXTERNAL_HOST_KEY, formatBrokerExternalHost(serviceInstanceGuid))
        template.replace(BROKER_PASSWORD_KEY, broker_auth_password)

/*
        ServiceInstance serviceInstance = provisioningPersistenceService.getServiceInstance(serviceInstanceGuid)

        String opsManagerGroupId = ServiceDetailsHelper.from(serviceInstance.details).getValue(MONGODB_ENTERPRISE_GROUP_ID)
*/

        // Add any properties needed to be persisted with the deployment.
        return [from(PASSWORD, broker_auth_password as String)]
    }

    private String formatBrokerExternalHost(String serviceInstanceGuid) {
        "mysql-on-demand-" + serviceInstanceGuid + ".nd-cfapi.itn.ftgroup"
    }


    @Override
    AsyncOperationResult requestProvision(LastOperationJobContext context) {
        StateMachine stateMachine = createProvisionStateMachine(context)
        ServiceStateWithAction currentState = getProvisionState(context)
        def actionResult = stateMachine.setCurrentState(currentState,createStateMachineContext(context))
        return AsyncOperationResult.of(actionResult.go2NextState ? stateMachine.nextState(currentState) : currentState, actionResult.details)
    }

    @VisibleForTesting
    private BoshStateMachineContext createStateMachineContext(LastOperationJobContext context) {
        return new BoshStateMachineContext(
                boshFacade: getBoshFacade(),
                boshTemplateCustomizer: this,
                lastOperationJobContext: context)
    }

    @VisibleForTesting
    private StateMachine createProvisionStateMachine(LastOperationJobContext context) {
        //Only need bosh deployment for now
        StateMachine stateMachine = new StateMachine([])
        stateMachine.addAllFromStateMachine(BoshStateMachineFactory.createProvisioningStateFlow(false))

        //FIXME: also need to delegate provisionning call to mysql_release broker
        return stateMachine
    }
    @VisibleForTesting
    private ServiceStateWithAction getProvisionState(LastOperationJobContext context) {
        ServiceStateWithAction provisionState = null
        if (!context.lastOperation.internalState) {
            provisionState = BoshProvisionState.CREATE_DEPLOYMENT
        } else {
            provisionState = BoshProvisionState.of(context.lastOperation.internalState).orNull()
        }
        return provisionState
    }

    @Override
    Optional<AsyncOperationResult> requestDeprovision(LastOperationJobContext context) {
        StateMachine stateMachine = createDeprovisionStateMachine(context)
        ServiceStateWithAction currentState = getDeprovisionState(context)
        def actionResult = stateMachine.setCurrentState(currentState,createStateMachineContext(context))
        return Optional.of(AsyncOperationResult.of(actionResult.go2NextState ? stateMachine.nextState(currentState) : currentState, actionResult.details))
    }

    @VisibleForTesting
    private StateMachine createDeprovisionStateMachine(LastOperationJobContext context){
        StateMachine stateMachine = new StateMachine([])
        stateMachine.addAllFromStateMachine(BoshStateMachineFactory.createDeprovisioningStateFlow(false))
    }

    @VisibleForTesting
    private ServiceStateWithAction getDeprovisionState(LastOperationJobContext context) {
        ServiceStateWithAction deprovisionState = null
        if (!context.lastOperation.internalState) {
            deprovisionState = BoshDeprovisionState.DELETE_BOSH_DEPLOYMENT
        } else {
            deprovisionState = BoshDeprovisionState.of(context.lastOperation.internalState).orNull()
        }
        return deprovisionState
    }

    @Override
    BindResponse bind(BindRequest request) {
        def broker_url = formatBrokerExternalHost(request.serviceInstance.guid)

        def broker_auth_password = ServiceDetailsHelper.from(request.serviceInstance.details).getValue(PASSWORD)
        def serviceBrokerClient = serviceBrokerClientFacade.createServiceBrokerClient(broker_url, broker_auth_password)

        CreateServiceInstanceBindingRequest serviceInstanceBindingRequest = new CreateServiceInstanceBindingRequest(request.service.guid, request.plan.guid, request.app_guid, null, null)
        def bindingResponse = serviceBrokerClient.createServiceInstanceBinding(serviceInstanceBindingRequest)
        def credentials = bindingResponse.body.credentials
        return new BindResponse(
                details: [], //no need to persist binding level data
                credentials: new MysqlBindResponseDto(credentials: credentials))

/*

        def database = ServiceDetailsHelper.from(request.serviceInstance.details).getValue(DATABASE)
        def hosts = ServiceDetailsHelper.from(request.serviceInstance.details).findAllWithServiceDetailType(ServiceDetailType.HOST)
        def groupId = getMongoDbGroupId(request.serviceInstance)
        DbUserCredentials dbUserCredentials = opsManagerFacade.createDbUser(groupId, database)
        def opsManagerCredentials = opsManagerFacade.createOpsManagerUser(groupId, request.serviceInstance.guid)


        return new BindResponse(details: [ServiceDetail.from(ServiceDetailKey.USER, dbUserCredentials.username),
                                          ServiceDetail.from(ServiceDetailKey.PASSWORD, dbUserCredentials.password),
                                          ServiceDetail.from(ServiceDetailKey.MONGODB_ENTERPRISE_OPS_MANAGER_USER_NAME, opsManagerCredentials.user),
                                          ServiceDetail.from(ServiceDetailKey.MONGODB_ENTERPRISE_OPS_MANAGER_PASSWORD, opsManagerCredentials.password),
                                          ServiceDetail.from(ServiceDetailKey.MONGODB_ENTERPRISE_OPS_MANAGER_USER_ID, opsManagerCredentials.userId)],
                credentials: new MongoDbEnterpriseBindResponseDto(
                        database: database,
                        username: dbUserCredentials.username,
                        password: dbUserCredentials.password,
                        hosts: hosts,
                        port: ServiceDetailsHelper.from(request.serviceInstance.details).getValue(PORT),
                        opsManagerUrl: getOpsManagerUrl(),
                        opsManagerUser: opsManagerCredentials.user,
                        opsManagerPassword: opsManagerCredentials.password,
                        replicaSet: ServiceDetailsHelper.from(request.serviceInstance.details).getValue(MONGODB_ENTERPRISE_REPLICA_SET)))

                        */
    }



    @Override
    void unbind(UnbindRequest request) {
        def broker_url = formatBrokerExternalHost(request.serviceInstance.guid)

        def broker_auth_password = ServiceDetailsHelper.from(request.serviceInstance.details).getValue(PASSWORD)
        def serviceBrokerClient = serviceBrokerClientFacade.createServiceBrokerClient(broker_url, broker_auth_password)

        def deleteServiceInstanceBindingRequest = new DeleteServiceInstanceBindingRequest(request.serviceInstance.guid, request.binding.guid, request.service.guid, request.serviceInstance.plan.guid)
        def deleteServiceInstanceBindingResponse = serviceBrokerClient.deleteServiceInstanceBinding(deleteServiceInstanceBindingRequest)

        def statusCode = deleteServiceInstanceBindingResponse.statusCode
        if (statusCode != HttpStatus.OK) {
            throw new RuntimeException(deleteServiceInstanceBindingResponse.toString()) //FIXME: find the right way to propagate the status code
        }
    }


}